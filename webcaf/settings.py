"""
Django settings for webcaf project.

Generated by 'django-admin startproject' using Django 5.1.10.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import uuid
from pathlib import Path

from csp.constants import NONCE, SELF
from environ import Env

env = Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent

Env.read_env(os.path.join(BASE_DIR, ".env"))

DEBUG = env.bool("DEBUG")
if DEBUG:
    # Use dotenv for debug environments
    from dotenv import load_dotenv

    load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY: str = str(uuid.uuid4()) if DEBUG else env.str("SECRET_KEY", default="not_set")  # type: ignore
APPEND_SLASH = True
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["*"])

X_FRAME_OPTIONS = "SAMEORIGIN"

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "govuk_frontend_django",
    "webcaf.webcaf.apps.WebcafConfig",
    "csp",
    "mozilla_django_oidc",
]

AUTHENTICATION_BACKENDS = (
    "webcaf.auth.OIDCBackend",
    "django.contrib.auth.backends.ModelBackend",
)

MIDDLEWARE = [
    "csp.middleware.CSPMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "webcaf.auth.LoginRequiredMiddleware",
]

ROOT_URLCONF = "webcaf.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "webcaf", "templates"), os.path.join(BASE_DIR, "webcaf", "templates", "caf")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "webcaf.context_processors.variable_page_content",
            ],
        },
    },
]

WSGI_APPLICATION = "webcaf.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if "RDS_DB_NAME" in os.environ:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ["RDS_DB_NAME"],
            "USER": os.environ["RDS_USERNAME"],
            "PASSWORD": os.environ["RDS_PASSWORD"],
            "HOST": os.environ["RDS_HOST"],
            "PORT": os.environ["RDS_PORT"],
            "OPTIONS": {
                "connect_timeout": 5,
            },
        }
    }
else:
    DATABASES = {
        "default": env.db_url(default="postgresql:///webcaf"),  # type: ignore
    }

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "webcaf", "static"),
]
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STATIC_URL = "/assets/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
# Django Whitenoise Configuration
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = [".map"]
WHITENOISE_ALLOW_ALL_ORIGINS = False
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# Content Security Policy: only allow images, stylesheets and scripts from the
# same origin as the HTML
CONTENT_SECURITY_POLICY = {
    "DIRECTIVES": {
        "connect-src": (
            SELF,
            "https://*.google-analytics.com",
            "https://*.analytics.google.com",
            "https://*.googletagmanager.com",
        ),
        "form-action": (SELF,),
        "frame-ancestors": (SELF,),
        "frame-src": (SELF, NONCE, "https://www.googletagmanager.com"),
        "img-src": (SELF, NONCE, "data:"),
        "script-src": (
            SELF,
            NONCE,
            "sha256-nBhTljJHpMrd9MOPzdAm2s1BkTJWObIEdVxg/bet7PE=",  # pragma: allowlist secret
            "https://*.googletagmanager.com",
        ),
        "style-src": (
            SELF,
            NONCE,
        ),
    }
}

# If we want to test CSP breaches we need to set a fake reporting URL, so the tests
# check if it's been called.
if "TEST_CSP" in os.environ:
    CSP_REPORT_URI = "/csp-report"  # The URI doesn't exist but is intercepted by the test suite

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-gb"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

FRAMEWORK_PATH = os.path.join(BASE_DIR, "..", "frameworks", "cyber-assessment-framework-v3.2.yaml")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
    },
    "formatters": {
        "verbose": {
            "format": "[%(asctime)s] [%(process)d:%(threadName)s] [%(levelname)s] [%(name)s] %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S %z",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "": {
            "level": ("INFO" if not DEBUG else "DEBUG"),
            "handlers": ["console"],
            "propagate": True,
        },
    },
}

SSO_MODE = env.str("SSO_MODE", "external")  # or dex or local or none

if SSO_MODE.lower() == "external":
    OIDC_RP_CLIENT_ID = env.str("OIDC_RP_CLIENT_ID")
    OIDC_RP_CLIENT_SECRET = env.str("OIDC_RP_CLIENT_SECRET")  # pragma: allowlist secret
    OIDC_OP_AUTHORIZATION_ENDPOINT = env.str("OIDC_OP_AUTHORIZATION_ENDPOINT")
    OIDC_OP_TOKEN_ENDPOINT = env.str("OIDC_OP_TOKEN_ENDPOINT")
    OIDC_OP_USER_ENDPOINT = env.str("OIDC_OP_USER_ENDPOINT")
    OIDC_OP_JWKS_ENDPOINT = env.str("OIDC_OP_JWKS_ENDPOINT")
    OIDC_OP_LOGOUT_ENDPOINT = env.str("OIDC_OP_LOGOUT_ENDPOINT")
    OIDC_STORE_ID_TOKEN = True
    OIDC_STORE_ACCESS_TOKEN = True
    LOGOUT_REDIRECT_URL = env.str("LOGOUT_REDIRECT_URL")
else:
    sso_host = "dex" if SSO_MODE == "dex" else "localhost"
    OIDC_RP_CLIENT_ID = "my-django-app"
    OIDC_RP_CLIENT_SECRET = "my-django-secret"  # pragma: allowlist secret
    OIDC_OP_AUTHORIZATION_ENDPOINT = "http://localhost:5556/auth"
    OIDC_OP_TOKEN_ENDPOINT = f"http://{sso_host}:5556/token"
    OIDC_OP_USER_ENDPOINT = f"http://{sso_host}:5556/userinfo"
    OIDC_OP_JWKS_ENDPOINT = f"http://{sso_host}:5556/keys"
    OIDC_STORE_ID_TOKEN = True
    OIDC_STORE_ACCESS_TOKEN = True
    OIDC_OP_LOGOUT_ENDPOINT = "http://localhost:5556/auth/logout"
    LOGOUT_REDIRECT_URL = "http://localhost:8010/"

OIDC_RP_SCOPES = env.str("OIDC_RP_SCOPES", "openid email profile")
OIDC_RP_SIGN_ALGO = env.str("OIDC_RP_SIGN_ALGO", "RS256")
if DEBUG:
    OIDC_VERIFY_SSL = False

ALLOW_LOGOUT_GET_METHOD = True
LOGIN_REDIRECT_URL = "/my-account"

if not DEBUG:
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True
    CSRF_TRUSTED_ORIGINS = [f"https://{os.environ.get('DOMAIN_NAME', 'localhost')}"]
    # CSRF_FAILURE_VIEW = "webcaf.request.views.csrf_failure_view"
    SESSION_COOKIE_SECURE = True
