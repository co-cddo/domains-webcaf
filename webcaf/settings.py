"""
Django settings for webcaf project.

Generated by 'django-admin startproject' using Django 5.1.10.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import uuid
from pathlib import Path

from environ import Env

env = Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent

Env.read_env(os.path.join(BASE_DIR, ".env"))

DEBUG = env.bool("DEBUG")
if DEBUG:
    # Use dotenv for debug environments
    from dotenv import load_dotenv

    load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY: str = str(uuid.uuid4()) if DEBUG else env.str("SECRET_KEY", default="not_set")  # type: ignore


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["*"])

X_FRAME_OPTIONS = "SAMEORIGIN"

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "govuk_frontend_django",
    "webcaf.webcaf.apps.WebcafConfig",
    "csp",
    "crispy_forms",
    "crispy_forms_gds",
]

MIDDLEWARE = [
    "csp.middleware.CSPMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "webcaf.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "webcaf", "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "webcaf.utils.variable_page_content",
            ],
        },
    },
]

WSGI_APPLICATION = "webcaf.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if "RDS_DB_NAME" in os.environ:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ["RDS_DB_NAME"],
            "USER": os.environ["RDS_USERNAME"],
            "PASSWORD": os.environ["RDS_PASSWORD"],
            "HOST": os.environ["RDS_HOST"],
            "PORT": os.environ["RDS_PORT"],
            "OPTIONS": {
                "connect_timeout": 5,
            },
        }
    }
else:
    DATABASES = {
        "default": env.db_url(default="postgresql:///webcaf"),  # type: ignore
    }

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "webcaf", "static"),
]
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
# Django Whitenoise Configuration
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = [".map"]
WHITENOISE_ALLOW_ALL_ORIGINS = False
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# Content Security Policy: only allow images, stylesheets and scripts from the
# same origin as the HTML
CONTENT_SECURITY_POLICY = {
    "DIRECTIVES": {
        "connect-src": "'self' https://*.google-analytics.com "
        "https://*.analytics.google.com "
        "https://*.googletagmanager.com",
        "form-action": "'self'",
        "frame-ancestors": "'self'",
        "frame-src": "'self' https://www.googletagmanager.com",
        "img-src": "'self' data:",
        "script-src": "'self' 'sha256-AARnBNRDCiUBHwIzUNjOFmwUcLG+zzTLIDKbbFJ11II=' 'sha256-nBhTljJHpMrd9MOPzdAm2s1BkTJWObIEdVxg/bet7PE=' 'sha256-+6WnXIl4mbFTCARd8N3COQmT3bJJmo32N8q8ZSQAIcU=' https://*.googletagmanager.com",  # pragma: allowlist secret
        "style-src": "'self' 'sha256-Rq+Udb7G9s54kGQgXm9FNWjdD54j3K2pjH36tR6lliI='",  # pragma: allowlist secret
    }
}


# If we want to test CSP breaches we need to set a fake reporting URL, so the tests
# check if it's been called.
if "TEST_CSP" in os.environ:
    CSP_REPORT_URI = "/csp-report"  # The URI doesn't exist but is intercepted by the test suite


CRISPY_ALLOWED_TEMPLATE_PACKS = ["gds"]
CRISPY_TEMPLATE_PACK = "gds"

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-gb"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

FRAMEWORK_PATH = os.path.join(BASE_DIR, "..", "frameworks", "cyber-assessment-framework-v3.2.yaml")
