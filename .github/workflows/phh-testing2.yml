name: Build AWS CDK Python App

on:
  push:
    branches:
      - main-phh-testing2 # Trigger on pushes to the main branch
      - develop # Also trigger on pushes to a develop branch
  pull_request:
    branches:
      - main-phh-testing2
      - develop
  workflow_dispatch: # Allows manual triggering from the GitHub Actions UI

env:
  # Define the path to your CDK Python application's root directory
  # This is where your app.py, cdk.json, and requirements.txt are located.
  CDK_APP_DIR: ./ # Example: If your CDK app is in a subfolder like 'cdk-app/', change this to './cdk-app/'
  PYTHON_VERSION: '3.12' # Specify the Python version your CDK app uses (e.g., '3.8', '3.9', '3.10', '3.11')
  AWS_ACCOUNT_ID: '123456789012' # Replace with your actual AWS Account ID
  AWS_REGION: 'eu-west-2' # Replace with your desired AWS region

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for OpenID Connect (OIDC) to assume an AWS IAM role
      contents: read  # Required to checkout code from the repository

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: webcaf
          POSTGRES_USER: webcaf
          POSTGRES_PASSWORD: webcaf
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pyenv and Python
        run: |
            curl https://pyenv.run | bash && \
            export PYENV_ROOT="$HOME/.pyenv" && \
            [[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH" && \
            eval "$(pyenv init -)" && \
            for repo in ~/.pyenv/plugins/*/ ~/.pyenv/; do [[ -d "$repo/.git" ]] && (cd "$repo" && git remote set-head origin -a); done && \
            pyenv update && \
            pyenv install ${{ env.PYTHON_VERSION }} && \
            pyenv global ${{ env.PYTHON_VERSION }} && \
            pyenv rehash
            python -m venv .venv
            source .venv/bin/activate
        
#      - name: Set up Python ${{ env.PYTHON_VERSION }}
#        uses: actions/setup-python@v5
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Node.js and AWS CDK CLI
        # AWS CDK CLI is a Node.js application, even for Python CDK apps.
        uses: actions/setup-node@v4
        with:
          node-version: '22' # Use a recent LTS Node.js version
      - run: npm install -g aws-cdk@2 # Install AWS CDK CLI globally (v2 is recommended)

      - name: Install Dependencies
        run: |
            python -m pip install --upgrade poetry pre-commit
            poetry install --no-root
      - name: Run linters
        run: |
            pre-commit run --all

      - name: Install Python dependencies
        # Navigate to the CDK app directory and install dependencies from requirements.txt
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: ${{ env.CDK_APP_DIR }} # Run commands in the CDK app directory

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsCDKRole # Example role name
          aws-region: ${{ env.AWS_REGION }}
          # Optional: Role duration, default is 1 hour, the following, if uncommented, sets it to 15 minutes
          # role-duration-seconds: 900

      - name: CDK Bootstrap
        # Ensure the AWS environment is bootstrapped for CDK deployments.
        run: cdk bootstrap aws://${{ env.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }}
        working-directory: ${{ env.CDK_APP_DIR }}

      - name: CDK Synth
        # Convert the CDK code into CloudFormation templates.
        run: cdk synth
        working-directory: ${{ env.CDK_APP_DIR }}

##      - name: CDK Deploy
        # Deploy the synthesized CloudFormation templates to AWS.
        # --all: Deploys all stacks defined in your CDK app.
        # --require-approval never: Bypasses manual approval for changes.
        #   For production, consider removing this and implementing manual approval
        #   via GitHub Environments or a separate workflow step.
##        run: cdk deploy --all --require-approval never
##        working-directory: ${{ env.CDK_APP_DIR }}

      - name: Save CloudFormation templates (Optional)
        # Save the synthesized templates as an artifact for review or for subsequent deployment steps in a different job.
        uses: actions/upload-artifact@v4
        with:
          name: cdk-synth-output
          path: ${{ env.CDK_APP_DIR }}/cdk.out/ # Default output directory for CDK synth
          retention-days: 5 # How long to keep the artifact

